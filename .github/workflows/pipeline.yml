name: CI + Release

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quick-checks:
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dev deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Ruff + Black + Mypy
        run: |
          ruff --version
          ruff .
          black --check .
          # Run mypy on SDK if present
          if [ -d "builder-sdk/pandacea_sdk" ]; then mypy builder-sdk/pandacea_sdk; fi

      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: GolangCI-Lint (agent-backend)
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60.1
          working-directory: agent-backend

      - name: Go tests
        working-directory: agent-backend
        run: go test ./...

      - name: ABI compatibility test (skip if ABIs absent)
        run: |
          if ls abi/*.json >/dev/null 2>&1; then
            pytest -q tests/abi_compat_test.py
          else
            echo "No ABI files present. Skipping ABI compatibility test."
          fi

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pipx
          pipx install poetry
          poetry --version

      - name: Build SDK wheel (builder-sdk)
        working-directory: builder-sdk
        run: poetry build

      - name: Install Foundry (for ABI export)
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          ~/.foundry/bin/foundryup
          echo "$HOME/.foundry/bin" >> "$GITHUB_PATH"

      - name: Export ABIs
        run: |
          chmod +x scripts/export_abi.sh
          bash scripts/export_abi.sh
          ls -la abi

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            builder-sdk/dist/*
            abi/*.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            builder-sdk/dist/*
            abi/*.json
          generate_release_notes: true
