name: Pandacea Protocol CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  agent-backend:
    name: Agent Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Install dependencies
      working-directory: agent-backend
      run: go mod download
      
    - name: Run unit tests with coverage
      working-directory: agent-backend
      run: |
        go test ./... -count=1 -covermode=atomic -coverprofile=coverage.out
        go tool cover -func=coverage.out > coverage.txt
      
    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
        
    - name: Run security scan
      working-directory: agent-backend
      run: |
        gosec -fmt=json -out=security-report.json -config=.gosec ./...
        gosec -fmt=text -config=.gosec ./...
      continue-on-error: false
      
    - name: Check for security issues
      working-directory: agent-backend
      run: |
        # Parse gosec output and fail if medium or high severity issues found
        if [ -f security-report.json ]; then
          # Count medium and high severity issues
          MEDIUM_HIGH_COUNT=$(jq -r '.Issues[] | select(.severity == "MEDIUM" or .severity == "HIGH") | .severity' security-report.json | wc -l)
          
          if [ "$MEDIUM_HIGH_COUNT" -gt 0 ]; then
            echo "❌ Found $MEDIUM_HIGH_COUNT medium or high severity security issues"
            echo "Security scan failed. Please review and fix the issues above."
            exit 1
          else
            echo "✅ No medium or high severity security issues found"
          fi
        else
          echo "❌ Security report not generated"
          exit 1
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: agent-security-report
        path: agent-backend/security-report.json
        retention-days: 30
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: agent-coverage-report
        path: |
          agent-backend/coverage.out
          agent-backend/coverage.txt
        retention-days: 30

  builder-sdk:
    name: Builder SDK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        poetry --version
        
    - name: Install dependencies
      working-directory: builder-sdk
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Run unit tests with coverage
      working-directory: builder-sdk
      run: |
        poetry run pytest -q --maxfail=1 \
          --cov=pandacea_sdk \
          --cov-report=xml:coverage.xml \
          --junitxml=junit.xml \
          tests/
        
    - name: Run security scan
      working-directory: builder-sdk
      run: |
        bandit -r pandacea_sdk/ -f json -o security-report.json -c .bandit
        bandit -r pandacea_sdk/ -f txt -c .bandit
      continue-on-error: false
      
    - name: Check for security issues
      working-directory: builder-sdk
      run: |
        # Parse bandit output and fail if any security issues found
        if [ -f security-report.json ]; then
          # Count total security issues
          ISSUE_COUNT=$(jq '.results | length' security-report.json)
          
          if [ "$ISSUE_COUNT" -gt 0 ]; then
            echo "❌ Found $ISSUE_COUNT security issues"
            echo "Security scan failed. Please review and fix the issues above."
            exit 1
          else
            echo "✅ No security issues found"
          fi
        else
          echo "❌ Security report not generated"
          exit 1
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sdk-security-report
        path: builder-sdk/security-report.json
        retention-days: 30
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sdk-coverage-report
        path: |
          builder-sdk/coverage.xml
          builder-sdk/junit.xml
        retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [agent-backend, builder-sdk]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install integration test dependencies
      working-directory: integration
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run integration tests
      working-directory: integration
      run: |
        python -m pytest test_integration.py -v 