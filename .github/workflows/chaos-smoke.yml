name: Chaos Smoke Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run chaos tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Specific scenario to run (optional)'
        required: false
        default: 'evm_rpc_flap'

jobs:
  chaos-smoke:
    name: Chaos Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Strict time cap for chaos tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      working-directory: integration
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Docker Compose
      run: |
        # Install Docker Compose if not already available
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
    - name: Start services
      run: |
        # Start core services needed for chaos testing
        docker-compose up -d anvil ipfs agent-backend
        # Wait for services to be ready
        sleep 30
        
    - name: Check service health
      run: |
        # Check if core services are responding
        echo "Checking service health..."
        
        # Check Anvil (EVM RPC)
        if curl -s -X POST http://localhost:8545 -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' | grep -q "result"; then
          echo "✅ Anvil is healthy"
        else
          echo "❌ Anvil is not responding"
          exit 1
        fi
        
        # Check IPFS
        if curl -s http://localhost:5001/api/v0/version | grep -q "Version"; then
          echo "✅ IPFS is healthy"
        else
          echo "❌ IPFS is not responding"
          exit 1
        fi
        
        # Check agent-backend
        if curl -s http://localhost:8080/health | grep -q "healthy"; then
          echo "✅ Agent backend is healthy"
        else
          echo "❌ Agent backend is not responding"
          exit 1
        fi
        
    - name: Run chaos scenarios
      working-directory: integration/chaos
      run: |
        # Create logs directory
        mkdir -p logs
        
        # Determine which scenario to run
        SCENARIO="${{ github.event.inputs.scenario || 'evm_rpc_flap' }}"
        echo "Running chaos scenario: $SCENARIO"
        
        # Run the scenario with timeout
        timeout 600 python run_chaos.py --scenario "$SCENARIO" 2>&1 | tee "logs/chaos_${SCENARIO}.log"
        
        # Check if scenario completed successfully
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "✅ Chaos scenario $SCENARIO completed successfully"
        else
          echo "❌ Chaos scenario $SCENARIO failed"
          # Don't fail the build for chaos test failures
          echo "Chaos test failure is expected and helps validate resilience"
        fi
        
        # Optionally run a second scenario if time permits
        if [ "$SCENARIO" = "evm_rpc_flap" ] && [ -f "scenarios/ipfs_slowdown.py" ]; then
          echo "Running additional scenario: ipfs_slowdown"
          timeout 300 python run_chaos.py --scenario "ipfs_slowdown" 2>&1 | tee "logs/chaos_ipfs_slowdown.log"
          
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "✅ Additional chaos scenario ipfs_slowdown completed successfully"
          else
            echo "⚠️ Additional chaos scenario ipfs_slowdown failed (non-blocking)"
          fi
        fi
        
    - name: Collect system logs
      if: always()
      run: |
        # Collect Docker logs for analysis
        mkdir -p integration/chaos/logs
        
        # Get logs from all running containers
        docker-compose logs --no-color > integration/chaos/logs/docker-compose.log 2>&1 || true
        
        # Get specific service logs
        docker-compose logs --no-color anvil > integration/chaos/logs/anvil.log 2>&1 || true
        docker-compose logs --no-color ipfs > integration/chaos/logs/ipfs.log 2>&1 || true
        docker-compose logs --no-color agent-backend > integration/chaos/logs/agent-backend.log 2>&1 || true
        
        # Get system resource usage
        docker stats --no-stream > integration/chaos/logs/docker-stats.log 2>&1 || true
        
    - name: Upload chaos logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-smoke-logs
        path: |
          integration/chaos/logs/
        retention-days: 7
        
    - name: Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: |
          integration/chaos/logs/chaos_*.log
        retention-days: 7
        
    - name: Cleanup services
      if: always()
      run: |
        # Stop all services
        docker-compose down -v || true
        
        # Clean up any remaining containers
        docker system prune -f || true
        
    - name: Report chaos test status
      if: always()
      run: |
        echo "## Chaos Smoke Test Results" >> $GITHUB_STEP_SUMMARY
        
        # Check if chaos logs exist
        if [ -f "integration/chaos/logs/chaos_evm_rpc_flap.log" ]; then
          echo "### EVM RPC Flap Scenario" >> $GITHUB_STEP_SUMMARY
          if grep -q "✅.*completed successfully" integration/chaos/logs/chaos_evm_rpc_flap.log; then
            echo "✅ **PASSED** - EVM RPC flap scenario completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **PARTIAL** - EVM RPC flap scenario had issues (expected for resilience testing)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ -f "integration/chaos/logs/chaos_ipfs_slowdown.log" ]; then
          echo "### IPFS Slowdown Scenario" >> $GITHUB_STEP_SUMMARY
          if grep -q "✅.*completed successfully" integration/chaos/logs/chaos_ipfs_slowdown.log; then
            echo "✅ **PASSED** - IPFS slowdown scenario completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **PARTIAL** - IPFS slowdown scenario had issues (expected for resilience testing)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: Chaos test failures are expected and help validate system resilience. Check the uploaded logs for detailed analysis." >> $GITHUB_STEP_SUMMARY
